import java.util.*;

// Class representing a product
class Product {
    private int productId;
    private String name;
    private double price;

    // Constructor
    public Product(int productId, String name, double price) {
        this.productId = productId;
        this.name = name;
        this.price = price;
    }

    // Getters and Setters
    public int getProductId() {
        return productId;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

// Class representing a cart item
class CartItem {
    private Product product;
    private int quantity;

    // Constructor
    public CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    // Getters
    public Product getProduct() {
        return product;
    }

    public int getQuantity() {
        return quantity;
    }

    // Method to decrease quantity
    public void decreaseQuantity(int amount) {
        if (amount <= quantity) {
            quantity -= amount;
        } else {
            System.out.println("Quantity to remove exceeds available quantity.");
        }
    }

    // Method to get the total price for this item
    public double getTotalPrice() {
        return product.getPrice() * quantity;
    }
}

// Class representing a shopping cart
class ShoppingCart {
    private List<CartItem> items;

    // Constructor
    public ShoppingCart() {
        this.items = new ArrayList<>();
    }

    // Method to add item to cart
    public void addItem(Product product, int quantity) {
        items.add(new CartItem(product, quantity));
    }

    // Method to remove item from cart
    public void removeItem(int productId, int quantityToRemove) {
        Iterator<CartItem> iterator = items.iterator();
        while (iterator.hasNext()) {
            CartItem item = iterator.next();
            if (item.getProduct().getProductId() == productId) {
                item.decreaseQuantity(quantityToRemove);
                if (item.getQuantity() == 0) {
                    iterator.remove();
                }
                return;
            }
        }
        System.out.println("Product with ID " + productId + " not found in the cart.");
    }

    // Method to display items in the cart
    public void displayItems() {
        System.out.println("\nYour Cart:");
        System.out.println("------------------------------------");
        System.out.println(String.format("%-5s %-20s %-10s", "ID", "Product", "Quantity"));
        System.out.println("------------------------------------");
        for (CartItem item : items) {
            Product product = item.getProduct();
            int quantity = item.getQuantity();
            System.out.println(String.format("%-5d %-20s %-10d", product.getProductId(), product.getName(), quantity));
        }
        System.out.println("------------------------------------\n");
    }

    // Method to generate bill
    public String generateBill() {
        StringBuilder bill = new StringBuilder();
        double totalPrice = 0;

        // Header
        bill.append("-------------------------------------------------\n");
        bill.append("               YOUR SHOPPING BILL               \n");
        bill.append("-------------------------------------------------\n");
        bill.append(String.format("%-5s %-20s %-10s %-10s\n", "ID", "Product", "Quantity", "Total"));

        // Items
        for (CartItem item : items) {
            Product product = item.getProduct();
            int quantity = item.getQuantity();
            double total = item.getTotalPrice();
            bill.append(String.format("%-5d %-20s %-10d $%-10.2f\n", product.getProductId(), product.getName(), quantity, total));
            totalPrice += total;
        }

        // Total Price
        bill.append("-------------------------------------------------\n");
        bill.append(String.format("%-35s $%-10.2f\n", "Total Price:", totalPrice));
        bill.append("-------------------------------------------------\n");

        // Clear the cart
        items.clear();

        return bill.toString();
    }
}

public class Main {
    private static List<Product> products = new ArrayList<>();

    static {
        // Adding products to the shop
        products.add(new Product(1, "Laptop", 75000.0));
        products.add(new Product(2, "Phone", 52000.0));
        products.add(new Product(3, "Tablet", 43000.0));
        products.add(new Product(4, "Charger", 2500.0));
        products.add(new Product(5, "Speaker", 17000.0));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Creating shopping cart
        ShoppingCart cart = new ShoppingCart();

       // Displaying available products
	System.out.println("Available products:");
	for (Product product : products) {
    		System.out.printf("ID: %d | Name: %-10s | Price: $%.2f%n", product.getProductId(), product.getName(), product.getPrice());
	}

        // Adding items to cart
        System.out.println("\nEnter the number of products to add:");
        int numProducts = scanner.nextInt();
        for (int i = 0; i < numProducts; i++) {
            System.out.println("Enter the ID of product " + (i + 1) + ":");
            int productId = scanner.nextInt();
            Product selectedProduct = getProductById(productId);
            if (selectedProduct != null) {
                System.out.println("Enter the quantity:");
                int quantity = scanner.nextInt();
                cart.addItem(selectedProduct, quantity);
            } else {
                System.out.println("Invalid product ID!");
            }
        }

        // Displaying items in the cart
        cart.displayItems();

        // Ask user if they want to remove items
        System.out.println("\nDo you want to remove any items from the cart? (yes/no)");
        String removeChoice = scanner.next().toLowerCase();
        if (removeChoice.equals("yes")) {
            // Removing items from cart
            System.out.println("Enter the ID of product to remove:");
            int productIdToRemove = scanner.nextInt();
            System.out.println("Enter the quantity to remove:");
            int quantityToRemove = scanner.nextInt();
            cart.removeItem(productIdToRemove, quantityToRemove);
        }

        // Generate and display bill
        System.out.println(cart.generateBill());

	System.out.println("Thank you for shopping!");

        scanner.close();
    }

    private static Product getProductById(int productId) {
        for (Product product : products) {
            if (product.getProductId() == productId) {
                return product;
            }
        }
        return null;
    }
}
